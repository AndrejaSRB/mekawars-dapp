/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MatchmakingInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addCrewToQueue(uint256)": FunctionFragment;
    "box()": FunctionFragment;
    "buckets(uint256)": FunctionFragment;
    "checkCrewWaitingForMatchResolve(uint256)": FunctionFragment;
    "crews()": FunctionFragment;
    "crewsInBucket(uint256)": FunctionFragment;
    "durabilityDecrease()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "loseRatingDecrease()": FunctionFragment;
    "manualMatchmakeRequest(uint256)": FunctionFragment;
    "maxBucketSize()": FunctionFragment;
    "maxRatingDiff()": FunctionFragment;
    "minBucketSize()": FunctionFragment;
    "minOpenBucketId()": FunctionFragment;
    "minTimeOffset()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resolveMatchForCrew(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setVrfParameters(address,uint64,uint32,uint16,bytes32)": FunctionFragment;
    "setupParameters(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vrfRequestIdBucketIndex(uint256)": FunctionFragment;
    "vrf_callbackGasLimit()": FunctionFragment;
    "vrf_coordinator()": FunctionFragment;
    "vrf_keyHash()": FunctionFragment;
    "vrf_requestConfirmations()": FunctionFragment;
    "vrf_subscriptionId()": FunctionFragment;
    "winRatingIncrease()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addCrewToQueue"
      | "box"
      | "buckets"
      | "checkCrewWaitingForMatchResolve"
      | "crews"
      | "crewsInBucket"
      | "durabilityDecrease"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "loseRatingDecrease"
      | "manualMatchmakeRequest"
      | "maxBucketSize"
      | "maxRatingDiff"
      | "minBucketSize"
      | "minOpenBucketId"
      | "minTimeOffset"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "resolveMatchForCrew"
      | "revokeRole"
      | "setVrfParameters"
      | "setupParameters"
      | "supportsInterface"
      | "vrfRequestIdBucketIndex"
      | "vrf_callbackGasLimit"
      | "vrf_coordinator"
      | "vrf_keyHash"
      | "vrf_requestConfirmations"
      | "vrf_subscriptionId"
      | "winRatingIncrease"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCrewToQueue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "box", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buckets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCrewWaitingForMatchResolve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "crews", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crewsInBucket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "durabilityDecrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loseRatingDecrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualMatchmakeRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBucketSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRatingDiff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBucketSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOpenBucketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMatchForCrew",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVrfParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequestIdBucketIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_keyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winRatingIncrease",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCrewToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "box", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCrewWaitingForMatchResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crewsInBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durabilityDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loseRatingDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualMatchmakeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBucketSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRatingDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBucketSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOpenBucketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMatchForCrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVrfParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequestIdBucketIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_keyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winRatingIncrease",
    data: BytesLike
  ): Result;

  events: {
    "AddCrewToBucket(uint256,uint256)": EventFragment;
    "ChangeBucketState(uint256,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewBucket(uint256,uint256)": EventFragment;
    "RemoveCrewFromBucket(uint256,uint256)": EventFragment;
    "ResolveMatch(uint256,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetBucketRandomSeed(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCrewToBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeBucketState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCrewFromBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolveMatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBucketRandomSeed"): EventFragment;
}

export interface AddCrewToBucketEventObject {
  crewId: BigNumber;
  bucketIndex: BigNumber;
}
export type AddCrewToBucketEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddCrewToBucketEventObject
>;

export type AddCrewToBucketEventFilter = TypedEventFilter<AddCrewToBucketEvent>;

export interface ChangeBucketStateEventObject {
  bucketIndex: BigNumber;
  newBucketState: number;
}
export type ChangeBucketStateEvent = TypedEvent<
  [BigNumber, number],
  ChangeBucketStateEventObject
>;

export type ChangeBucketStateEventFilter =
  TypedEventFilter<ChangeBucketStateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewBucketEventObject {
  bucketIndex: BigNumber;
  createdAt: BigNumber;
}
export type NewBucketEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewBucketEventObject
>;

export type NewBucketEventFilter = TypedEventFilter<NewBucketEvent>;

export interface RemoveCrewFromBucketEventObject {
  crewId: BigNumber;
  bucketIndex: BigNumber;
}
export type RemoveCrewFromBucketEvent = TypedEvent<
  [BigNumber, BigNumber],
  RemoveCrewFromBucketEventObject
>;

export type RemoveCrewFromBucketEventFilter =
  TypedEventFilter<RemoveCrewFromBucketEvent>;

export interface ResolveMatchEventObject {
  bucketIndex: BigNumber;
  crewIdFirst: BigNumber;
  crewIdSecond: BigNumber;
  winCrewId: BigNumber;
}
export type ResolveMatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ResolveMatchEventObject
>;

export type ResolveMatchEventFilter = TypedEventFilter<ResolveMatchEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetBucketRandomSeedEventObject {
  bucketIndex: BigNumber;
  randomSeed: BigNumber;
}
export type SetBucketRandomSeedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetBucketRandomSeedEventObject
>;

export type SetBucketRandomSeedEventFilter =
  TypedEventFilter<SetBucketRandomSeedEvent>;

export interface Matchmaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MatchmakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addCrewToQueue(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    box(overrides?: CallOverrides): Promise<[string]>;

    buckets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        state: number;
        minRating: BigNumber;
        maxRating: BigNumber;
        createdAt: BigNumber;
        randomSeed: BigNumber;
      }
    >;

    checkCrewWaitingForMatchResolve(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    crews(overrides?: CallOverrides): Promise<[string]>;

    crewsInBucket(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bucketIndex: BigNumber; crewIndex: BigNumber }
    >;

    durabilityDecrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _crews: PromiseOrValue<string>,
      _box: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loseRatingDecrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualMatchmakeRequest(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxBucketSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRatingDiff(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBucketSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    minOpenBucketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveMatchForCrew(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupParameters(
      _minBucketSize: PromiseOrValue<BigNumberish>,
      _maxBucketSize: PromiseOrValue<BigNumberish>,
      _minTimeOffset: PromiseOrValue<BigNumberish>,
      _maxRatingDiff: PromiseOrValue<BigNumberish>,
      _durabilityDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vrfRequestIdBucketIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    vrf_coordinator(overrides?: CallOverrides): Promise<[string]>;

    vrf_keyHash(overrides?: CallOverrides): Promise<[string]>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    winRatingIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addCrewToQueue(
    crewId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  box(overrides?: CallOverrides): Promise<string>;

  buckets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      state: number;
      minRating: BigNumber;
      maxRating: BigNumber;
      createdAt: BigNumber;
      randomSeed: BigNumber;
    }
  >;

  checkCrewWaitingForMatchResolve(
    crewId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  crews(overrides?: CallOverrides): Promise<string>;

  crewsInBucket(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { bucketIndex: BigNumber; crewIndex: BigNumber }
  >;

  durabilityDecrease(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _crews: PromiseOrValue<string>,
    _box: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loseRatingDecrease(overrides?: CallOverrides): Promise<BigNumber>;

  manualMatchmakeRequest(
    crewId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

  maxRatingDiff(overrides?: CallOverrides): Promise<BigNumber>;

  minBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

  minOpenBucketId(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveMatchForCrew(
    crewId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVrfParameters(
    _coordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    requestConfirmations: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupParameters(
    _minBucketSize: PromiseOrValue<BigNumberish>,
    _maxBucketSize: PromiseOrValue<BigNumberish>,
    _minTimeOffset: PromiseOrValue<BigNumberish>,
    _maxRatingDiff: PromiseOrValue<BigNumberish>,
    _durabilityDecrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vrfRequestIdBucketIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

  vrf_coordinator(overrides?: CallOverrides): Promise<string>;

  vrf_keyHash(overrides?: CallOverrides): Promise<string>;

  vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

  vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  winRatingIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addCrewToQueue(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    box(overrides?: CallOverrides): Promise<string>;

    buckets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        state: number;
        minRating: BigNumber;
        maxRating: BigNumber;
        createdAt: BigNumber;
        randomSeed: BigNumber;
      }
    >;

    checkCrewWaitingForMatchResolve(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    crews(overrides?: CallOverrides): Promise<string>;

    crewsInBucket(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bucketIndex: BigNumber; crewIndex: BigNumber }
    >;

    durabilityDecrease(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _crews: PromiseOrValue<string>,
      _box: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loseRatingDecrease(overrides?: CallOverrides): Promise<BigNumber>;

    manualMatchmakeRequest(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxRatingDiff(overrides?: CallOverrides): Promise<BigNumber>;

    minBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

    minOpenBucketId(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveMatchForCrew(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupParameters(
      _minBucketSize: PromiseOrValue<BigNumberish>,
      _maxBucketSize: PromiseOrValue<BigNumberish>,
      _minTimeOffset: PromiseOrValue<BigNumberish>,
      _maxRatingDiff: PromiseOrValue<BigNumberish>,
      _durabilityDecrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vrfRequestIdBucketIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

    vrf_coordinator(overrides?: CallOverrides): Promise<string>;

    vrf_keyHash(overrides?: CallOverrides): Promise<string>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    winRatingIncrease(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddCrewToBucket(uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      bucketIndex?: PromiseOrValue<BigNumberish> | null
    ): AddCrewToBucketEventFilter;
    AddCrewToBucket(
      crewId?: PromiseOrValue<BigNumberish> | null,
      bucketIndex?: PromiseOrValue<BigNumberish> | null
    ): AddCrewToBucketEventFilter;

    "ChangeBucketState(uint256,uint8)"(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      newBucketState?: null
    ): ChangeBucketStateEventFilter;
    ChangeBucketState(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      newBucketState?: null
    ): ChangeBucketStateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewBucket(uint256,uint256)"(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      createdAt?: null
    ): NewBucketEventFilter;
    NewBucket(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      createdAt?: null
    ): NewBucketEventFilter;

    "RemoveCrewFromBucket(uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      bucketIndex?: PromiseOrValue<BigNumberish> | null
    ): RemoveCrewFromBucketEventFilter;
    RemoveCrewFromBucket(
      crewId?: PromiseOrValue<BigNumberish> | null,
      bucketIndex?: PromiseOrValue<BigNumberish> | null
    ): RemoveCrewFromBucketEventFilter;

    "ResolveMatch(uint256,uint256,uint256,uint256)"(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      crewIdFirst?: null,
      crewIdSecond?: null,
      winCrewId?: null
    ): ResolveMatchEventFilter;
    ResolveMatch(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      crewIdFirst?: null,
      crewIdSecond?: null,
      winCrewId?: null
    ): ResolveMatchEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetBucketRandomSeed(uint256,uint256)"(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      randomSeed?: null
    ): SetBucketRandomSeedEventFilter;
    SetBucketRandomSeed(
      bucketIndex?: PromiseOrValue<BigNumberish> | null,
      randomSeed?: null
    ): SetBucketRandomSeedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addCrewToQueue(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    box(overrides?: CallOverrides): Promise<BigNumber>;

    buckets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCrewWaitingForMatchResolve(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crews(overrides?: CallOverrides): Promise<BigNumber>;

    crewsInBucket(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    durabilityDecrease(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _crews: PromiseOrValue<string>,
      _box: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loseRatingDecrease(overrides?: CallOverrides): Promise<BigNumber>;

    manualMatchmakeRequest(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxRatingDiff(overrides?: CallOverrides): Promise<BigNumber>;

    minBucketSize(overrides?: CallOverrides): Promise<BigNumber>;

    minOpenBucketId(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveMatchForCrew(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupParameters(
      _minBucketSize: PromiseOrValue<BigNumberish>,
      _maxBucketSize: PromiseOrValue<BigNumberish>,
      _minTimeOffset: PromiseOrValue<BigNumberish>,
      _maxRatingDiff: PromiseOrValue<BigNumberish>,
      _durabilityDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrfRequestIdBucketIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    winRatingIncrease(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCrewToQueue(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    box(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buckets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCrewWaitingForMatchResolve(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crews(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crewsInBucket(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    durabilityDecrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _crews: PromiseOrValue<string>,
      _box: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loseRatingDecrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualMatchmakeRequest(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxBucketSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRatingDiff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBucketSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minOpenBucketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeOffset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveMatchForCrew(
      crewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupParameters(
      _minBucketSize: PromiseOrValue<BigNumberish>,
      _maxBucketSize: PromiseOrValue<BigNumberish>,
      _minTimeOffset: PromiseOrValue<BigNumberish>,
      _maxRatingDiff: PromiseOrValue<BigNumberish>,
      _durabilityDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfRequestIdBucketIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_callbackGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_requestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_subscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winRatingIncrease(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
