/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common';

export interface VRFManagerMockInterface extends utils.Interface {
  functions: {
    'fulfill(uint256)': FunctionFragment;
    'getRandomNumber()': FunctionFragment;
    'setNumWords(address,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'fulfill' | 'getRandomNumber' | 'setNumWords'): FunctionFragment;

  encodeFunctionData(functionFragment: 'fulfill', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRandomNumber', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setNumWords',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'fulfill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRandomNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNumWords', data: BytesLike): Result;

  events: {
    'NewRequest(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewRequest'): EventFragment;
}

export interface NewRequestEventObject {
  id: BigNumber;
}
export type NewRequestEvent = TypedEvent<[BigNumber], NewRequestEventObject>;

export type NewRequestEventFilter = TypedEventFilter<NewRequestEvent>;

export interface VRFManagerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRFManagerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfill(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRandomNumber(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setNumWords(
      _contract: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  fulfill(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getRandomNumber(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setNumWords(
    _contract: PromiseOrValue<string>,
    _num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    fulfill(_requestId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setNumWords(
      _contract: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'NewRequest(uint256)'(id?: null): NewRequestEventFilter;
    NewRequest(id?: null): NewRequestEventFilter;
  };

  estimateGas: {
    fulfill(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getRandomNumber(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setNumWords(
      _contract: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfill(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getRandomNumber(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setNumWords(
      _contract: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
