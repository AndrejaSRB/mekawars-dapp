/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IBox {
  export type BoxStructStruct = {
    rarity: PromiseOrValue<BigNumberish>;
    level: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type BoxStructStructOutput = [number, BigNumber, BigNumber] & {
    rarity: number;
    level: BigNumber;
    createdAt: BigNumber;
  };

  export type LootResultStruct = {
    weight: PromiseOrValue<BigNumberish>;
    itemIds: PromiseOrValue<BigNumberish>[];
  };

  export type LootResultStructOutput = [BigNumber, BigNumber[]] & {
    weight: BigNumber;
    itemIds: BigNumber[];
  };

  export type LootTableStruct = {
    ntAmountPrize: PromiseOrValue<BigNumberish>;
    totalWeight: PromiseOrValue<BigNumberish>;
    results: IBox.LootResultStruct[];
  };

  export type LootTableStructOutput = [
    BigNumber,
    BigNumber,
    IBox.LootResultStructOutput[]
  ] & {
    ntAmountPrize: BigNumber;
    totalWeight: BigNumber;
    results: IBox.LootResultStructOutput[];
  };
}

export interface BoxInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MATCHMAKING_CONTRACT()": FunctionFragment;
    "babyOogaChargeNeededForUpgrade()": FunctionFragment;
    "boxRarityProbabilities(uint256)": FunctionFragment;
    "boxRarityProbabilitiesSum()": FunctionFragment;
    "boxWaitingTime()": FunctionFragment;
    "buyMysteryBox(uint256,uint256)": FunctionFragment;
    "crews()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "instantOpenBox(uint256,uint256)": FunctionFragment;
    "instantOpenBoxPrice()": FunctionFragment;
    "lootTables(uint8,uint256)": FunctionFragment;
    "matchWonBox(uint256,uint256)": FunctionFragment;
    "maxSlotsAvailable()": FunctionFragment;
    "mekawarsItems()": FunctionFragment;
    "mysteryBoxLootTables(uint256)": FunctionFragment;
    "mysteryBoxPrices(uint256)": FunctionFragment;
    "openBox(uint256,uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContracts(address,address)": FunctionFragment;
    "setLootTables(uint8[],uint256[],(uint256,uint256,(uint256,uint256[])[])[],uint256[],(uint256,uint256,(uint256,uint256[])[])[])": FunctionFragment;
    "setVrfParameters(address,uint64,uint32,uint16,bytes32)": FunctionFragment;
    "setupParameters(uint256,uint256,uint256[],uint256,uint256[])": FunctionFragment;
    "slots(uint256,uint256)": FunctionFragment;
    "stakeBabyOoga(uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unstakeBabyOoga(uint256,uint256)": FunctionFragment;
    "upgradeBox(uint256,uint256)": FunctionFragment;
    "vrfRequests(uint256)": FunctionFragment;
    "vrf_callbackGasLimit()": FunctionFragment;
    "vrf_coordinator()": FunctionFragment;
    "vrf_keyHash()": FunctionFragment;
    "vrf_requestConfirmations()": FunctionFragment;
    "vrf_subscriptionId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MATCHMAKING_CONTRACT"
      | "babyOogaChargeNeededForUpgrade"
      | "boxRarityProbabilities"
      | "boxRarityProbabilitiesSum"
      | "boxWaitingTime"
      | "buyMysteryBox"
      | "crews"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "instantOpenBox"
      | "instantOpenBoxPrice"
      | "lootTables"
      | "matchWonBox"
      | "maxSlotsAvailable"
      | "mekawarsItems"
      | "mysteryBoxLootTables"
      | "mysteryBoxPrices"
      | "openBox"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "revokeRole"
      | "setContracts"
      | "setLootTables"
      | "setVrfParameters"
      | "setupParameters"
      | "slots"
      | "stakeBabyOoga"
      | "supportsInterface"
      | "unstakeBabyOoga"
      | "upgradeBox"
      | "vrfRequests"
      | "vrf_callbackGasLimit"
      | "vrf_coordinator"
      | "vrf_keyHash"
      | "vrf_requestConfirmations"
      | "vrf_subscriptionId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATCHMAKING_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "babyOogaChargeNeededForUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boxRarityProbabilities",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boxRarityProbabilitiesSum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boxWaitingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMysteryBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "crews", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "instantOpenBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "instantOpenBoxPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootTables",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "matchWonBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSlotsAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mekawarsItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mysteryBoxLootTables",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mysteryBoxPrices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLootTables",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      IBox.LootTableStruct[],
      PromiseOrValue<BigNumberish>[],
      IBox.LootTableStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVrfParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slots",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBabyOoga",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeBabyOoga",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_keyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrf_subscriptionId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATCHMAKING_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "babyOogaChargeNeededForUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boxRarityProbabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boxRarityProbabilitiesSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boxWaitingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMysteryBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantOpenBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantOpenBoxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lootTables", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchWonBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSlotsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mekawarsItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mysteryBoxLootTables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mysteryBoxPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLootTables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVrfParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeBabyOoga",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeBabyOoga",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_keyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrf_subscriptionId",
    data: BytesLike
  ): Result;

  events: {
    "BoxOpened(uint256,uint256,uint8,uint256,uint256[])": EventFragment;
    "BoxUpgraded(uint256,uint256,uint8,uint8)": EventFragment;
    "BuyMysteryBox(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MysteryBoxOpened(uint256,uint256,uint256,uint256[])": EventFragment;
    "OpenBox(uint256,uint256,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakeBabyOoga(uint256,uint256,uint256)": EventFragment;
    "UnstakeBabyOoga(uint256,uint256,uint256)": EventFragment;
    "UpgradeBox(uint256,uint256,uint256,uint8)": EventFragment;
    "WonBoxFromMatch(uint256,uint256,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoxUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyMysteryBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MysteryBoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeBabyOoga"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeBabyOoga"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WonBoxFromMatch"): EventFragment;
}

export interface BoxOpenedEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newSlotState: number;
  NTWon: BigNumber;
  itemsWon: BigNumber[];
}
export type BoxOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber, BigNumber[]],
  BoxOpenedEventObject
>;

export type BoxOpenedEventFilter = TypedEventFilter<BoxOpenedEvent>;

export interface BoxUpgradedEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newRarity: number;
  newSlotState: number;
}
export type BoxUpgradedEvent = TypedEvent<
  [BigNumber, BigNumber, number, number],
  BoxUpgradedEventObject
>;

export type BoxUpgradedEventFilter = TypedEventFilter<BoxUpgradedEvent>;

export interface BuyMysteryBoxEventObject {
  crewId: BigNumber;
  level: BigNumber;
}
export type BuyMysteryBoxEvent = TypedEvent<
  [BigNumber, BigNumber],
  BuyMysteryBoxEventObject
>;

export type BuyMysteryBoxEventFilter = TypedEventFilter<BuyMysteryBoxEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MysteryBoxOpenedEventObject {
  crewId: BigNumber;
  level: BigNumber;
  NTWon: BigNumber;
  itemsWon: BigNumber[];
}
export type MysteryBoxOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[]],
  MysteryBoxOpenedEventObject
>;

export type MysteryBoxOpenedEventFilter =
  TypedEventFilter<MysteryBoxOpenedEvent>;

export interface OpenBoxEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newSlotState: number;
}
export type OpenBoxEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  OpenBoxEventObject
>;

export type OpenBoxEventFilter = TypedEventFilter<OpenBoxEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakeBabyOogaEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  oogaId: BigNumber;
}
export type StakeBabyOogaEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  StakeBabyOogaEventObject
>;

export type StakeBabyOogaEventFilter = TypedEventFilter<StakeBabyOogaEvent>;

export interface UnstakeBabyOogaEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  oogaId: BigNumber;
}
export type UnstakeBabyOogaEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UnstakeBabyOogaEventObject
>;

export type UnstakeBabyOogaEventFilter = TypedEventFilter<UnstakeBabyOogaEvent>;

export interface UpgradeBoxEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newBabyOogaCharge: BigNumber;
  newSlotState: number;
}
export type UpgradeBoxEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  UpgradeBoxEventObject
>;

export type UpgradeBoxEventFilter = TypedEventFilter<UpgradeBoxEvent>;

export interface WonBoxFromMatchEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newBabyOogaCharge: BigNumber;
  box: IBox.BoxStructStructOutput;
}
export type WonBoxFromMatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, IBox.BoxStructStructOutput],
  WonBoxFromMatchEventObject
>;

export type WonBoxFromMatchEventFilter = TypedEventFilter<WonBoxFromMatchEvent>;

export interface Box extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MATCHMAKING_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    babyOogaChargeNeededForUpgrade(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boxRarityProbabilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boxRarityProbabilitiesSum(overrides?: CallOverrides): Promise<[BigNumber]>;

    boxWaitingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyMysteryBox(
      crewId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crews(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instantOpenBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instantOpenBoxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    lootTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ntAmountPrize: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSlotsAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;

    mekawarsItems(overrides?: CallOverrides): Promise<[string]>;

    mysteryBoxLootTables(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ntAmountPrize: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    mysteryBoxPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContracts(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLootTables(
      _rarities: PromiseOrValue<BigNumberish>[],
      _levels: PromiseOrValue<BigNumberish>[],
      _lootTables: IBox.LootTableStruct[],
      _mysteryBoxLevels: PromiseOrValue<BigNumberish>[],
      _mysteryBoxLootTables: IBox.LootTableStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupParameters(
      _boxWaitingTime: PromiseOrValue<BigNumberish>,
      _babyOogaChargeNeededForUpgrade: PromiseOrValue<BigNumberish>,
      _boxRarityProbabilities: PromiseOrValue<BigNumberish>[],
      _instantOpenBoxPrice: PromiseOrValue<BigNumberish>,
      _mysteryBoxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, IBox.BoxStructStructOutput, BigNumber, BigNumber] & {
        state: number;
        box: IBox.BoxStructStructOutput;
        stakedBabyOoga: BigNumber;
        babyOogaCharge: BigNumber;
      }
    >;

    stakeBabyOoga(
      oogaId: PromiseOrValue<BigNumberish>,
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unstakeBabyOoga(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        requestType: number;
        crewId: BigNumber;
        slotIndex: BigNumber;
        level: BigNumber;
      }
    >;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    vrf_coordinator(overrides?: CallOverrides): Promise<[string]>;

    vrf_keyHash(overrides?: CallOverrides): Promise<[string]>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MATCHMAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

  babyOogaChargeNeededForUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

  boxRarityProbabilities(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boxRarityProbabilitiesSum(overrides?: CallOverrides): Promise<BigNumber>;

  boxWaitingTime(overrides?: CallOverrides): Promise<BigNumber>;

  buyMysteryBox(
    crewId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crews(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    mekaApesERC721Address: PromiseOrValue<string>,
    crewsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instantOpenBox(
    crewId: PromiseOrValue<BigNumberish>,
    slotIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instantOpenBoxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  lootTables(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      ntAmountPrize: BigNumber;
      totalWeight: BigNumber;
    }
  >;

  matchWonBox(
    crewId: PromiseOrValue<BigNumberish>,
    randomSeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  mekawarsItems(overrides?: CallOverrides): Promise<string>;

  mysteryBoxLootTables(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      ntAmountPrize: BigNumber;
      totalWeight: BigNumber;
    }
  >;

  mysteryBoxPrices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openBox(
    crewId: PromiseOrValue<BigNumberish>,
    slotIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContracts(
    mekaApesERC721Address: PromiseOrValue<string>,
    crewsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLootTables(
    _rarities: PromiseOrValue<BigNumberish>[],
    _levels: PromiseOrValue<BigNumberish>[],
    _lootTables: IBox.LootTableStruct[],
    _mysteryBoxLevels: PromiseOrValue<BigNumberish>[],
    _mysteryBoxLootTables: IBox.LootTableStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVrfParameters(
    _coordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    requestConfirmations: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupParameters(
    _boxWaitingTime: PromiseOrValue<BigNumberish>,
    _babyOogaChargeNeededForUpgrade: PromiseOrValue<BigNumberish>,
    _boxRarityProbabilities: PromiseOrValue<BigNumberish>[],
    _instantOpenBoxPrice: PromiseOrValue<BigNumberish>,
    _mysteryBoxPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slots(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, IBox.BoxStructStructOutput, BigNumber, BigNumber] & {
      state: number;
      box: IBox.BoxStructStructOutput;
      stakedBabyOoga: BigNumber;
      babyOogaCharge: BigNumber;
    }
  >;

  stakeBabyOoga(
    oogaId: PromiseOrValue<BigNumberish>,
    crewId: PromiseOrValue<BigNumberish>,
    slotIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unstakeBabyOoga(
    crewId: PromiseOrValue<BigNumberish>,
    slotIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeBox(
    crewId: PromiseOrValue<BigNumberish>,
    slotIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      requestType: number;
      crewId: BigNumber;
      slotIndex: BigNumber;
      level: BigNumber;
    }
  >;

  vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

  vrf_coordinator(overrides?: CallOverrides): Promise<string>;

  vrf_keyHash(overrides?: CallOverrides): Promise<string>;

  vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

  vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MATCHMAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

    babyOogaChargeNeededForUpgrade(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boxRarityProbabilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boxRarityProbabilitiesSum(overrides?: CallOverrides): Promise<BigNumber>;

    boxWaitingTime(overrides?: CallOverrides): Promise<BigNumber>;

    buyMysteryBox(
      crewId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    crews(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    instantOpenBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    instantOpenBoxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lootTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ntAmountPrize: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    mekawarsItems(overrides?: CallOverrides): Promise<string>;

    mysteryBoxLootTables(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ntAmountPrize: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    mysteryBoxPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContracts(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLootTables(
      _rarities: PromiseOrValue<BigNumberish>[],
      _levels: PromiseOrValue<BigNumberish>[],
      _lootTables: IBox.LootTableStruct[],
      _mysteryBoxLevels: PromiseOrValue<BigNumberish>[],
      _mysteryBoxLootTables: IBox.LootTableStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupParameters(
      _boxWaitingTime: PromiseOrValue<BigNumberish>,
      _babyOogaChargeNeededForUpgrade: PromiseOrValue<BigNumberish>,
      _boxRarityProbabilities: PromiseOrValue<BigNumberish>[],
      _instantOpenBoxPrice: PromiseOrValue<BigNumberish>,
      _mysteryBoxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, IBox.BoxStructStructOutput, BigNumber, BigNumber] & {
        state: number;
        box: IBox.BoxStructStructOutput;
        stakedBabyOoga: BigNumber;
        babyOogaCharge: BigNumber;
      }
    >;

    stakeBabyOoga(
      oogaId: PromiseOrValue<BigNumberish>,
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstakeBabyOoga(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        requestType: number;
        crewId: BigNumber;
        slotIndex: BigNumber;
        level: BigNumber;
      }
    >;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

    vrf_coordinator(overrides?: CallOverrides): Promise<string>;

    vrf_keyHash(overrides?: CallOverrides): Promise<string>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BoxOpened(uint256,uint256,uint8,uint256,uint256[])"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null,
      NTWon?: null,
      itemsWon?: null
    ): BoxOpenedEventFilter;
    BoxOpened(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null,
      NTWon?: null,
      itemsWon?: null
    ): BoxOpenedEventFilter;

    "BoxUpgraded(uint256,uint256,uint8,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newRarity?: null,
      newSlotState?: null
    ): BoxUpgradedEventFilter;
    BoxUpgraded(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newRarity?: null,
      newSlotState?: null
    ): BoxUpgradedEventFilter;

    "BuyMysteryBox(uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): BuyMysteryBoxEventFilter;
    BuyMysteryBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): BuyMysteryBoxEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MysteryBoxOpened(uint256,uint256,uint256,uint256[])"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      NTWon?: null,
      itemsWon?: null
    ): MysteryBoxOpenedEventFilter;
    MysteryBoxOpened(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      NTWon?: null,
      itemsWon?: null
    ): MysteryBoxOpenedEventFilter;

    "OpenBox(uint256,uint256,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null
    ): OpenBoxEventFilter;
    OpenBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null
    ): OpenBoxEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StakeBabyOoga(uint256,uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): StakeBabyOogaEventFilter;
    StakeBabyOoga(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): StakeBabyOogaEventFilter;

    "UnstakeBabyOoga(uint256,uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeBabyOogaEventFilter;
    UnstakeBabyOoga(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeBabyOogaEventFilter;

    "UpgradeBox(uint256,uint256,uint256,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      newSlotState?: null
    ): UpgradeBoxEventFilter;
    UpgradeBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      newSlotState?: null
    ): UpgradeBoxEventFilter;

    "WonBoxFromMatch(uint256,uint256,uint256,tuple)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      box?: null
    ): WonBoxFromMatchEventFilter;
    WonBoxFromMatch(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      box?: null
    ): WonBoxFromMatchEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MATCHMAKING_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    babyOogaChargeNeededForUpgrade(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boxRarityProbabilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boxRarityProbabilitiesSum(overrides?: CallOverrides): Promise<BigNumber>;

    boxWaitingTime(overrides?: CallOverrides): Promise<BigNumber>;

    buyMysteryBox(
      crewId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crews(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instantOpenBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instantOpenBoxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lootTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    mekawarsItems(overrides?: CallOverrides): Promise<BigNumber>;

    mysteryBoxLootTables(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mysteryBoxPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContracts(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLootTables(
      _rarities: PromiseOrValue<BigNumberish>[],
      _levels: PromiseOrValue<BigNumberish>[],
      _lootTables: IBox.LootTableStruct[],
      _mysteryBoxLevels: PromiseOrValue<BigNumberish>[],
      _mysteryBoxLootTables: IBox.LootTableStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupParameters(
      _boxWaitingTime: PromiseOrValue<BigNumberish>,
      _babyOogaChargeNeededForUpgrade: PromiseOrValue<BigNumberish>,
      _boxRarityProbabilities: PromiseOrValue<BigNumberish>[],
      _instantOpenBoxPrice: PromiseOrValue<BigNumberish>,
      _mysteryBoxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeBabyOoga(
      oogaId: PromiseOrValue<BigNumberish>,
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeBabyOoga(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATCHMAKING_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    babyOogaChargeNeededForUpgrade(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boxRarityProbabilities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boxRarityProbabilitiesSum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boxWaitingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMysteryBox(
      crewId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crews(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instantOpenBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instantOpenBoxPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lootTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSlotsAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mekawarsItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mysteryBoxLootTables(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mysteryBoxPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContracts(
      mekaApesERC721Address: PromiseOrValue<string>,
      crewsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLootTables(
      _rarities: PromiseOrValue<BigNumberish>[],
      _levels: PromiseOrValue<BigNumberish>[],
      _lootTables: IBox.LootTableStruct[],
      _mysteryBoxLevels: PromiseOrValue<BigNumberish>[],
      _mysteryBoxLootTables: IBox.LootTableStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVrfParameters(
      _coordinator: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      requestConfirmations: PromiseOrValue<BigNumberish>,
      keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupParameters(
      _boxWaitingTime: PromiseOrValue<BigNumberish>,
      _babyOogaChargeNeededForUpgrade: PromiseOrValue<BigNumberish>,
      _boxRarityProbabilities: PromiseOrValue<BigNumberish>[],
      _instantOpenBoxPrice: PromiseOrValue<BigNumberish>,
      _mysteryBoxPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeBabyOoga(
      oogaId: PromiseOrValue<BigNumberish>,
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakeBabyOoga(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeBox(
      crewId: PromiseOrValue<BigNumberish>,
      slotIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_callbackGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_requestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrf_subscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
