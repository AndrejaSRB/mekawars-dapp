/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBox {
  export type BoxStructStruct = {
    rarity: PromiseOrValue<BigNumberish>;
    level: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type BoxStructStructOutput = [number, BigNumber, BigNumber] & {
    rarity: number;
    level: BigNumber;
    createdAt: BigNumber;
  };
}

export interface IBoxInterface extends utils.Interface {
  functions: {
    "matchWonBox(uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "matchWonBox"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "matchWonBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchWonBox",
    data: BytesLike
  ): Result;

  events: {
    "BoxOpened(uint256,uint256,uint8,uint256,uint256[])": EventFragment;
    "BoxUpgraded(uint256,uint256,uint8,uint8)": EventFragment;
    "BuyMysteryBox(uint256,uint256)": EventFragment;
    "MysteryBoxOpened(uint256,uint256,uint256,uint256[])": EventFragment;
    "OpenBox(uint256,uint256,uint8)": EventFragment;
    "StakeBabyOoga(uint256,uint256,uint256)": EventFragment;
    "UnstakeBabyOoga(uint256,uint256,uint256)": EventFragment;
    "UpgradeBox(uint256,uint256,uint256,uint8)": EventFragment;
    "WonBoxFromMatch(uint256,uint256,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoxUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyMysteryBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MysteryBoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeBabyOoga"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeBabyOoga"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WonBoxFromMatch"): EventFragment;
}

export interface BoxOpenedEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newSlotState: number;
  NTWon: BigNumber;
  itemsWon: BigNumber[];
}
export type BoxOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber, BigNumber[]],
  BoxOpenedEventObject
>;

export type BoxOpenedEventFilter = TypedEventFilter<BoxOpenedEvent>;

export interface BoxUpgradedEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newRarity: number;
  newSlotState: number;
}
export type BoxUpgradedEvent = TypedEvent<
  [BigNumber, BigNumber, number, number],
  BoxUpgradedEventObject
>;

export type BoxUpgradedEventFilter = TypedEventFilter<BoxUpgradedEvent>;

export interface BuyMysteryBoxEventObject {
  crewId: BigNumber;
  level: BigNumber;
}
export type BuyMysteryBoxEvent = TypedEvent<
  [BigNumber, BigNumber],
  BuyMysteryBoxEventObject
>;

export type BuyMysteryBoxEventFilter = TypedEventFilter<BuyMysteryBoxEvent>;

export interface MysteryBoxOpenedEventObject {
  crewId: BigNumber;
  level: BigNumber;
  NTWon: BigNumber;
  itemsWon: BigNumber[];
}
export type MysteryBoxOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber[]],
  MysteryBoxOpenedEventObject
>;

export type MysteryBoxOpenedEventFilter =
  TypedEventFilter<MysteryBoxOpenedEvent>;

export interface OpenBoxEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newSlotState: number;
}
export type OpenBoxEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  OpenBoxEventObject
>;

export type OpenBoxEventFilter = TypedEventFilter<OpenBoxEvent>;

export interface StakeBabyOogaEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  oogaId: BigNumber;
}
export type StakeBabyOogaEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  StakeBabyOogaEventObject
>;

export type StakeBabyOogaEventFilter = TypedEventFilter<StakeBabyOogaEvent>;

export interface UnstakeBabyOogaEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  oogaId: BigNumber;
}
export type UnstakeBabyOogaEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UnstakeBabyOogaEventObject
>;

export type UnstakeBabyOogaEventFilter = TypedEventFilter<UnstakeBabyOogaEvent>;

export interface UpgradeBoxEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newBabyOogaCharge: BigNumber;
  newSlotState: number;
}
export type UpgradeBoxEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  UpgradeBoxEventObject
>;

export type UpgradeBoxEventFilter = TypedEventFilter<UpgradeBoxEvent>;

export interface WonBoxFromMatchEventObject {
  crewId: BigNumber;
  slotIndex: BigNumber;
  newBabyOogaCharge: BigNumber;
  box: IBox.BoxStructStructOutput;
}
export type WonBoxFromMatchEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, IBox.BoxStructStructOutput],
  WonBoxFromMatchEventObject
>;

export type WonBoxFromMatchEventFilter = TypedEventFilter<WonBoxFromMatchEvent>;

export interface IBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  matchWonBox(
    crewId: PromiseOrValue<BigNumberish>,
    randomSeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoxOpened(uint256,uint256,uint8,uint256,uint256[])"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null,
      NTWon?: null,
      itemsWon?: null
    ): BoxOpenedEventFilter;
    BoxOpened(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null,
      NTWon?: null,
      itemsWon?: null
    ): BoxOpenedEventFilter;

    "BoxUpgraded(uint256,uint256,uint8,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newRarity?: null,
      newSlotState?: null
    ): BoxUpgradedEventFilter;
    BoxUpgraded(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newRarity?: null,
      newSlotState?: null
    ): BoxUpgradedEventFilter;

    "BuyMysteryBox(uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): BuyMysteryBoxEventFilter;
    BuyMysteryBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null
    ): BuyMysteryBoxEventFilter;

    "MysteryBoxOpened(uint256,uint256,uint256,uint256[])"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      NTWon?: null,
      itemsWon?: null
    ): MysteryBoxOpenedEventFilter;
    MysteryBoxOpened(
      crewId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      NTWon?: null,
      itemsWon?: null
    ): MysteryBoxOpenedEventFilter;

    "OpenBox(uint256,uint256,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null
    ): OpenBoxEventFilter;
    OpenBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newSlotState?: null
    ): OpenBoxEventFilter;

    "StakeBabyOoga(uint256,uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): StakeBabyOogaEventFilter;
    StakeBabyOoga(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): StakeBabyOogaEventFilter;

    "UnstakeBabyOoga(uint256,uint256,uint256)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeBabyOogaEventFilter;
    UnstakeBabyOoga(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      oogaId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeBabyOogaEventFilter;

    "UpgradeBox(uint256,uint256,uint256,uint8)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      newSlotState?: null
    ): UpgradeBoxEventFilter;
    UpgradeBox(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      newSlotState?: null
    ): UpgradeBoxEventFilter;

    "WonBoxFromMatch(uint256,uint256,uint256,tuple)"(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      box?: null
    ): WonBoxFromMatchEventFilter;
    WonBoxFromMatch(
      crewId?: PromiseOrValue<BigNumberish> | null,
      slotIndex?: null,
      newBabyOogaCharge?: null,
      box?: null
    ): WonBoxFromMatchEventFilter;
  };

  estimateGas: {
    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchWonBox(
      crewId: PromiseOrValue<BigNumberish>,
      randomSeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
