/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface VRFConsumerInterface extends utils.Interface {
  functions: {
    'rawFulfillRandomWords(uint256,uint256[])': FunctionFragment;
    'vrf_callbackGasLimit()': FunctionFragment;
    'vrf_coordinator()': FunctionFragment;
    'vrf_keyHash()': FunctionFragment;
    'vrf_requestConfirmations()': FunctionFragment;
    'vrf_subscriptionId()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'rawFulfillRandomWords'
      | 'vrf_callbackGasLimit'
      | 'vrf_coordinator'
      | 'vrf_keyHash'
      | 'vrf_requestConfirmations'
      | 'vrf_subscriptionId',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'rawFulfillRandomWords',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'vrf_callbackGasLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vrf_coordinator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vrf_keyHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vrf_requestConfirmations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vrf_subscriptionId', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'rawFulfillRandomWords', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vrf_callbackGasLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vrf_coordinator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vrf_keyHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vrf_requestConfirmations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vrf_subscriptionId', data: BytesLike): Result;

  events: {};
}

export interface VRFConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRFConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    vrf_coordinator(overrides?: CallOverrides): Promise<[string]>;

    vrf_keyHash(overrides?: CallOverrides): Promise<[string]>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

  vrf_coordinator(overrides?: CallOverrides): Promise<string>;

  vrf_keyHash(overrides?: CallOverrides): Promise<string>;

  vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

  vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<number>;

    vrf_coordinator(overrides?: CallOverrides): Promise<string>;

    vrf_keyHash(overrides?: CallOverrides): Promise<string>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<number>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vrf_callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_requestConfirmations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrf_subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
