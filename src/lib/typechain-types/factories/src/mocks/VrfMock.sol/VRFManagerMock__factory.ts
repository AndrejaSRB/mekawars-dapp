/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VRFManagerMock,
  VRFManagerMockInterface,
} from "../../../../src/mocks/VrfMock.sol/VRFManagerMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "NewRequest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "fulfill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRandomNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_num",
        type: "uint256",
      },
    ],
    name: "setNumWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610712806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a7eb5bc14610046578063753b880714610062578063dbdff2c11461007e575b600080fd5b610060600480360381019061005b9190610482565b61009c565b005b61007c600480360381019061007791906104c2565b6100e4565b005b6100866102fc565b60405161009391906104fe565b60405180910390f35b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006003600080600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205467ffffffffffffffff81111561017157610170610519565b5b60405190808252806020026020018201604052801561019f5781602001602082028036833780820191505090505b50905060005b6003600080600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811015610258576102266103a4565b82828151811061023957610238610548565b5b6020026020010181815250508080610250906105a6565b9150506101a5565b5060008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ba461483836040518363ffffffff1660e01b81526004016102c69291906106ac565b600060405180830381600087803b1580156102e057600080fd5b505af11580156102f4573d6000803e3d6000fd5b505050505050565b600033600080600160008154610311906105a6565b919050819055815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe5e7dd91b3ed7fb84c335f117423d1b9bbbed2d76c57e81520dd681b9ede988560015460405161039491906104fe565b60405180910390a1600154905090565b60006002600081546103b5906105a6565b9190508190556040516020016103cb91906104fe565b6040516020818303038152906040528051906020012060001c905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610419826103ee565b9050919050565b6104298161040e565b811461043457600080fd5b50565b60008135905061044681610420565b92915050565b6000819050919050565b61045f8161044c565b811461046a57600080fd5b50565b60008135905061047c81610456565b92915050565b60008060408385031215610499576104986103e9565b5b60006104a785828601610437565b92505060206104b88582860161046d565b9150509250929050565b6000602082840312156104d8576104d76103e9565b5b60006104e68482850161046d565b91505092915050565b6104f88161044c565b82525050565b600060208201905061051360008301846104ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105b18261044c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105e3576105e2610577565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106238161044c565b82525050565b6000610635838361061a565b60208301905092915050565b6000602082019050919050565b6000610659826105ee565b61066381856105f9565b935061066e8361060a565b8060005b8381101561069f5781516106868882610629565b975061069183610641565b925050600181019050610672565b5085935050505092915050565b60006040820190506106c160008301856104ef565b81810360208301526106d3818461064e565b9050939250505056fea2646970667358221220a1cd2efd3e0111834d4707c26632cc97b2362e73b627615df2beceb4cc92964c64736f6c634300080e0033";

type VRFManagerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFManagerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFManagerMock__factory extends ContractFactory {
  constructor(...args: VRFManagerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VRFManagerMock> {
    return super.deploy(overrides || {}) as Promise<VRFManagerMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VRFManagerMock {
    return super.attach(address) as VRFManagerMock;
  }
  override connect(signer: Signer): VRFManagerMock__factory {
    return super.connect(signer) as VRFManagerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFManagerMockInterface {
    return new utils.Interface(_abi) as VRFManagerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFManagerMock {
    return new Contract(address, _abi, signerOrProvider) as VRFManagerMock;
  }
}
