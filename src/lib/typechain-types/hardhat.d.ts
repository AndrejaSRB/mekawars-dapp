/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CombatLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CombatLib__factory>;
    getContractFactory(
      name: "Crews",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Crews__factory>;
    getContractFactory(
      name: "IMekaApesERC721Poly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMekaApesERC721Poly__factory>;
    getContractFactory(
      name: "IMekawarsItemsERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMekawarsItemsERC721__factory>;
    getContractFactory(
      name: "MekaApesERC721Poly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MekaApesERC721Poly__factory>;
    getContractFactory(
      name: "MekawarsItemsERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MekawarsItemsERC721__factory>;
    getContractFactory(
      name: "MockMekaApesERC721Poly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMekaApesERC721Poly__factory>;
    getContractFactory(
      name: "MockMekawarsItemsERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMekawarsItemsERC721__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CombatLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CombatLib>;
    getContractAt(
      name: "Crews",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Crews>;
    getContractAt(
      name: "IMekaApesERC721Poly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMekaApesERC721Poly>;
    getContractAt(
      name: "IMekawarsItemsERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMekawarsItemsERC721>;
    getContractAt(
      name: "MekaApesERC721Poly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MekaApesERC721Poly>;
    getContractAt(
      name: "MekawarsItemsERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MekawarsItemsERC721>;
    getContractAt(
      name: "MockMekaApesERC721Poly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMekaApesERC721Poly>;
    getContractAt(
      name: "MockMekawarsItemsERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMekawarsItemsERC721>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
